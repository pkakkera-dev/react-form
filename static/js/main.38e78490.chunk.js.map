{"version":3,"sources":["components/Card.jsx","components/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","children","Login","state","userId","password","loggedIn","buttonText","onSubmitHandler","event","setState","preventDefault","name","target","value","this","style","textAlign","color","paddingLeft","onSubmit","type","userID","onChange","e","handleInput","JSON","stringify","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8RAOeA,EAJF,SAAAC,GACX,OAAO,yBAAKC,UAAU,QAAQD,EAAME,WCwEvBC,E,2MAvEbC,MAAQ,CACNC,OAAQ,GACRC,SAAU,GACVC,UAAU,EACVC,WAAY,S,EAUdC,gBAAkB,SAAAC,GAChB,EAAKC,SAAS,CACZN,OAAQ,GACRC,SAAU,GACVC,UAAW,EAAKH,MAAMG,SACtBC,WAAsC,UAA1B,EAAKJ,MAAMI,WAAyB,SAAW,UAE7DE,EAAME,kB,2EAdIF,GACV,IAAMG,EAAOH,EAAMI,OAAOD,KACpBE,EAAQL,EAAMI,OAAOC,MAC3BC,KAAKL,SAAL,eACGE,EAAOE,M,+BAaF,IAAD,OACP,OACE,6BAASd,UAAU,gBAChBe,KAAKZ,MAAMG,UACV,4BACEU,MAAO,CACLC,UAAW,SACXC,MAAO,QACPC,YAAa,UAJjB,+BAUF,kBAAC,EAAD,KACE,0BAAMC,SAAUL,KAAKP,iBACnB,yBAAKR,UAAU,gBACb,2CACA,2BACEqB,KAAK,OACLT,KAAK,SACLE,MAAOC,KAAKZ,MAAMmB,OAClBC,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAYD,OAGpC,yBAAKxB,UAAU,gBACb,4CACA,2BACEqB,KAAK,WACLT,KAAK,WACLE,MAAOC,KAAKZ,MAAME,SAClBkB,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAYD,OAGpC,yBAAKxB,UAAU,mBACb,4BAAQqB,KAAK,UAAb,IAAwBN,KAAKZ,MAAMI,WAAnC,QAIN,kBAAC,EAAD,KACE,6BAAMmB,KAAKC,UAAUZ,KAAKZ,MAAO,KAAM,U,GAjE7ByB,IAAMC,WC0BXC,MA1Bf,SAAa/B,GACX,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,UACb,8BACE,8BACE,mDAAiC,OAavC,0BAAMA,UAAU,eAEhB,kBAAC,EAAD,CAAOM,SAAUP,EAAMO,aCbTyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.38e78490.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../css/style.scss\";\n\nconst Card = props => {\n  return <div className=\"card\">{props.children}</div>;\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\nimport \"../css/style.scss\";\n\nclass Login extends React.Component {\n  state = {\n    userId: \"\",\n    password: \"\",\n    loggedIn: false,\n    buttonText: \"Login\"\n  };\n\n  handleInput(event) {\n    const name = event.target.name;\n    const value = event.target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n  onSubmitHandler = event => {\n    this.setState({\n      userId: \"\",\n      password: \"\",\n      loggedIn: !this.state.loggedIn,\n      buttonText: this.state.buttonText === \"Login\" ? \"Logout\" : \"Login\"\n    });\n    event.preventDefault();\n  };\n\n  render() {\n    return (\n      <section className=\"form-section\">\n        {this.state.loggedIn && (\n          <strong\n            style={{\n              textAlign: \"center\",\n              color: \"green\",\n              paddingLeft: \"100px\"\n            }}\n          >\n            Login Success! Welcome User\n          </strong>\n        )}\n        <Card>\n          <form onSubmit={this.onSubmitHandler}>\n            <div className=\"form-control\">\n              <label>User Id:</label>\n              <input\n                type=\"text\"\n                name=\"userId\"\n                value={this.state.userID}\n                onChange={e => this.handleInput(e)}\n              />\n            </div>\n            <div className=\"form-control\">\n              <label>Password:</label>\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={e => this.handleInput(e)}\n              />\n            </div>\n            <div className=\"form-action-btn\">\n              <button type=\"submit\"> {this.state.buttonText} </button>\n            </div>\n          </form>\n        </Card>\n        <Card>\n          <pre>{JSON.stringify(this.state, null, 2)}</pre>\n        </Card>\n      </section>\n    );\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport \"./css/style.scss\";\nimport Login from \"./components/Login\";\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <span>\n          <span>\n            <strong> ACCOUNT LOGIN </strong>{\" \"}\n          </span>\n          {/* <button\n            onClick={() => {\n              props.loggedIn = false;\n            }}\n          >\n            {\" \"}\n            Logout\n          </button> */}\n        </span>\n      </div>\n\n      <span className=\"logout-btn\"></span>\n\n      <Login loggedIn={props.loggedIn} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}